{
  "author": {
    "email": "danptesta@gmail.com",
    "name": "Dan Testa"
  },
  "frontend": {
    "url": "not implemented"
  },
  "language": "node.js",
  "sources": "https://github.com/danptesta/conversation-service",
  "answers": {
    "1": "I approached the problem by first understanding the problem space (the video was a huge help).  I used TDD and Hexagonal Architecture to build out the app.  I deployed it using the serverless framework, AWS API Gateway, Lambda, and DynamoDB.  I secured the endpoints using oauth2 client_credentials flow (using AWS Cognito).  At first I spent too much time on test cases to validate the input, then switched to a simpler approach using json schema.  Initially I was only trying to solve the examples and went for the simplest solution the worked, which was to store only the last mutation and current text for each conversation.  After running the tests, I realized that there were more complex requirements than shown in the examples.  To satisfy those requirements, I had to restructure my app to store the mutation history of mutations to make those tests pass. Fortunately, my use of TDD gave me a stable test suite to safely navigate these changes.",
    "2": "I would add the UI, A/B testing (to verify customer value), API throttling, CI/CD, and better error messages.  I would explore using AWS Amplify and/or HTTP APIs service to simplify deployment.  I would also add something like FunctionShield to better secure my lambda functions (protecting against malicious injection attacks).",
    "3": "This was a great exercise and I thoroughly enjoyed working on it.  The instructions were pretty clear and well organized.  I feel great that I was able to solve it, but I am concerned about whether the amount of time it took to complete it meets your expectations.  It would be helpful to clarify earlier in the document that the code must pass more complex tests than shown in the examples.  There appears to be a mistake in example 4. I had to change the insert index on [B(6, 2)INS13:' and yellow'] from 13 to 18 to get it to work correctly.  Also, APIs usually return 4xx or 5xx for errors rather than 2xx with error messages in the body.  HTTP  204 is a no content response and AWS API Gateway suppresses any response body content returned, so it is not possible to replicate the DELETE response in the exact way that was specified.  I do believe that the guideline 4-6 hours is pretty optimistic for building the complete algorithm and a full stack application around it.  I could have saved time by studying the video a bit more and sticking more closely to what they were doing, which strongly suggested retaining the complete mutation history to evaluate the algorithm against.  My use of TDD was critical to successfully solving this challenge because it kept my code stable through the many twists and turns I ended up taking to solve increasingly complex requirements."
  }
}